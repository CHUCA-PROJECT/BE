pipeline {
    agent any

    environment {
        DOCKER_HUB_CREDS = 'docker-hub-credentials'
        GITHUB_CREDS = 'github-credentials'
    }

    // 도커 설치 단계 추가
    stages {
        stage('Install Docker') {
            steps {
                script {
                    sh '''
                    if ! command -v docker &> /dev/null
                    then
                        echo "Docker could not be found, installing Docker..."
                        sudo apt-get update
                        sudo apt-get install -y apt-transport-https ca-certificates curl gnupg-agent software-properties-common
                        curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -
                        sudo add-apt-repository \
                           "deb [arch=amd64] https://download.docker.com/linux/ubuntu \
                           $(lsb_release -cs) \
                           stable"
                        sudo apt-get update
                        sudo apt-get install -y docker-ce docker-ce-cli containerd.io
                        sudo usermod -aG docker $USER
                        sudo systemctl enable docker
                        sudo systemctl start docker
                        newgrp docker
                    else
                        echo "Docker is already installed"
                    fi
                    '''
                }
            }
        }

        stage('Clone Repo') {
            steps {
                git url: 'https://lab.ssafy.com/s08-final/S08P31A806.git',
                    credentialsId: 'swj', // Jenkins에서 설정한 credential의 ID
                    branch: 'deploy-k8s-gateway'
            }
        }

        stage('Gradle Build') {
            steps {
                dir('gateway/') {
                    sh 'ls'
                    sh 'chmod +x ./gradlew'
                    sh './gradlew clean build'
                }
            }
        }

        stage('Build Docker') {
            steps {
                script {
                    sh "docker build -t back-gateway:${env.BUILD_NUMBER} gateway/"
                    sh "docker tag back-gateway:${env.BUILD_NUMBER} wlwlsus/back-gateway:${env.BUILD_NUMBER}"
                }
            }
        }

        stage('Push Docker to Docker Hub') {
            steps {
                script {
                    withCredentials([usernamePassword(credentialsId: "${DOCKER_HUB_CREDS}", usernameVariable: 'DOCKER_USERNAME', passwordVariable: 'DOCKER_PASSWORD')]) {
                        sh "docker login -u ${DOCKER_USERNAME} -p ${DOCKER_PASSWORD}"
                        sh "docker push wlwlsus/back-gateway:${env.BUILD_NUMBER}"
                        sh "docker image prune -a -f || true"
                    }
                }
            }
        }

        stage('Update k8s Manifest') {
            steps {
                script {
                    withCredentials([usernamePassword(credentialsId: "${GITHUB_CREDS}", usernameVariable: 'GITHUB_USERNAME', passwordVariable: 'GITHUB_PASSWORD')]) {
                        sh "rm -rf allback-helm-chart"
                        sh "git clone https://github.com/wlwlsus/allback-helm-chart.git allback-helm-chart"
                        sh "ls -al"
                        dir('allback-helm-chart/gateway') {
                            sh "sed -i 's|repository: .\\+|repository: wlwlsus/back-gateway|' values.yaml"
                            sh "sed -i 's|tag: .\\+|tag: ${env.BUILD_NUMBER}|' values.yaml"
                            sh "git config user.email 'cadqe13@gmail.com'"
                            sh "git config user.name 'cadqe13'"
                            sh "git add ."
                            sh "git diff-index --quiet HEAD || git commit -m 'Update back-gateway image to ${env.BUILD_NUMBER}'"
                            sh "git remote set-url origin https://$GITHUB_USERNAME:$GITHUB_PASSWORD@github.com/wlwlsus/allback-helm-chart.git"
                            sh "git push origin main"
                        }
                    }
                }
            }
        }
    }
}
